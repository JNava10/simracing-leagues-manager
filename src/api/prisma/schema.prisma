generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(255)
  description   String        @db.VarChar(255)
  subcategories Subcategory[]

  userFavourites FavouriteCategories[]
  championships ChampionshipCategories[]

  ChampionshipPresetCategories ChampionshipPresetCategories[]
}

// TODO: Quitar despues
model Subcategory {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  parentId    Int
  description String   @db.VarChar(255)
  parent      Category @relation(fields: [parentId], references: [id])
}

// Usuarios

model User {
  id                   Int                  @id @default(autoincrement())
  nickname             String?              @db.VarChar(255)
  name                 String               @db.VarChar(255)
  lastname             String               @db.VarChar(255)
  secondLastname       String?              @db.VarChar(255)
  password             String               @db.VarChar(255)
  createdAt            DateTime             @default(now()) @db.DateTime(6)
  email                String?              @db.VarChar(255)
  profilePicUrl        String?              @db.VarChar(255)

  leagues              LeagueMember[]
  entries              SessionEntry[]
  leaguesCreated       League[]
  championshipsCreated LeagueChampionship[]
  championshipsJoined   ChampionshipEntry[]
  appRoles UserRole[]
  leaguePosts LeaguePost[]
  postComments PostComment[]
  favouriteSimulators FavouriteSimulator[]
  favouriteCategories FavouriteCategories[]
  auditActions LeagueAuditLog[]
}

model FavouriteSimulator {
  userId               Int
  simulatorId Int

  simulator          SimulatorGame            @relation(fields: [simulatorId], references: [id])
  user          User            @relation(fields: [userId], references: [id])

  @@id([userId, simulatorId])  
}

model FavouriteCategories {
  userId               Int
  categoryId Int

  category          Category            @relation(fields: [categoryId], references: [id])
  user          User            @relation(fields: [userId], references: [id])

  @@id([userId, categoryId])  
}

model UserRole {
  userId Int
  roleId Int
  role          AppRole            @relation(fields: [roleId], references: [id])
  user          User               @relation(fields: [userId], references: [id])

  @@id([roleId, userId])
}


model AppRole {
    id                   Int                  @id @default(autoincrement())
    name String

    users UserRole[]
}

/// Ligas ///

model League {
  id            Int                  @id @default(autoincrement())
  name          String               @db.VarChar(255)
  description   String               @db.VarChar(255)
  createdAt     DateTime             @default(now()) @db.DateTime(6)
  category      Int?
  authorId      Int

  author        User                 @relation(fields: [authorId], references: [id])
  championships LeagueChampionship[]
  members       LeagueMember[]
  leaguePost    LeaguePost[]
}

// Miembros pertenecientes a cada liga.
model LeagueMember {
  leagueId Int
  userId   Int
  accepted Boolean @default(false)
  joinedAt            DateTime?             @db.DateTime(6)
  requestedAt            DateTime?             @db.DateTime(6)

  league League @relation(fields: [leagueId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id(name: "memberKeys", [leagueId, userId])
}


// Campeonatos de cada liga

model LeagueChampionship {
  id          Int                 @id @default(autoincrement())
  leagueId    Int
  name        String              @db.VarChar(255)
  authorId    Int
  description String              @db.VarChar(255)
  simulatorId Int
  createdAt   DateTime            @default(now()) @db.DateTime(6)

  author      User?                @relation(fields: [authorId], references: [id])
  league      League?              @relation(fields: [leagueId], references: [id])
  simulator   SimulatorGame?              @relation(fields: [simulatorId], references: [id])

  rounds      ChampionshipRound[]
  entries      ChampionshipEntry[]
  categories ChampionshipCategories[]

  ChampionshipPresetUsed ChampionshipPresetUsed[]
}

model ChampionshipRound {
  id             Int                @id @default(autoincrement())
  championshipId Int
  layoutId        Int
  name           String?            @db.VarChar(255)
  description    String?            @db.VarChar(255)
  createdAt      DateTime           @default(now()) @db.DateTime(6)

  championship   LeagueChampionship @relation(fields: [championshipId], references: [id])
}

model ChampionshipCategories {
  championshipId Int
  categoryId        Int

  championship   LeagueChampionship @relation(fields: [championshipId], references: [id])
  categories   Category @relation(fields: [categoryId], references: [id])

  @@id(name: "keys", [championshipId, categoryId])

}


model ChampionshipEntry {
  id             Int                @id @default(autoincrement())
  championshipId Int
  userId         Int
  name           String?            @db.VarChar(255)
  description    String?            @db.VarChar(255)
  createdAt      DateTime           @default(now()) @db.DateTime(6)
  championship   LeagueChampionship @relation(fields: [championshipId], references: [id])
  user          User               @relation(fields: [userId], references: [id])
}

model Session {
  id            Int            @id @default(autoincrement())
  trackId       Int
  createdAt     DateTime       @default(now()) @db.DateTime(6)
  track         Track          @relation(fields: [trackId], references: [id])
  sessionEntry  SessionEntry[]
  raceSession   RaceSession?   @relation(fields: [raceSessionId], references: [id])
  raceSessionId Int?
}

model SessionEntry {
  driverId      Int    
  sessionId     Int    
  position      Int
  driver        User    @relation(fields: [driverId], references: [id])
  session       Session @relation(fields: [sessionId], references: [id])
  @@id([driverId, sessionId])
}

model RaceSession {
  id       Int       @id @default(autoincrement())
  laps     Int?
  duration Int? // Minutos
  session  Session[]
}

// Equipos //

// Información sobre los equipos existentes. Estos equipos pueden elegirse dentro de un campeonato
model Team {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(255)
  hexColor      String         @db.VarChar(7)
  carEntries    Int?            @default(2)
}

// Union entre los campeonatos y sus respectivos equipos.
model ChampionshipTeam {
  championshipId  Int            
  teamId  Int    

  @@id([championshipId, teamId])
}

/// Workshop de configuraciones ///

// Configuración predeterminada para poder configurar un campeonato. Los usuarios pueden crear estos presets y publicarlos en una "workshop".
model ChampionshipPreset {
  id            Int            @id @default(autoincrement())
  name String
  description String
  imgUrl String?
  scoreSystemId Int
  authorId Int
  createdAt DateTime @default(now()) @db.DateTime(6)

  Championships ChampionshipPresetUsed[]
  
  PresetCategories ChampionshipPresetCategories[]
  PresetLayouts ChampionshipPresetLayouts[]
  PresetScores ChampionshipPresetScores[]
}

model ChampionshipPresetUsed {
  presetId  Int
  championshipId Int

  preset       ChampionshipPreset @relation(fields: [presetId], references: [id])
  championship       LeagueChampionship @relation(fields: [championshipId], references: [id])

  @@id([presetId, championshipId])
}

// Puntuaciones pertenecientes a cada preset de configuración.
model ChampionshipPresetScores {
  presetId  Int
  scoreSystemId Int

  scoreSystem       ScoreSystem @relation(fields: [scoreSystemId], references: [id])
  preset       ChampionshipPreset @relation(fields: [presetId], references: [id])

  @@id([presetId, scoreSystemId])
}

// Trazados de circuito pertenecientes a cada preset de configuración.
model ChampionshipPresetLayouts {
  presetId  Int
  layoutId Int

  layout       TrackLayout @relation(fields: [layoutId], references: [id])
  preset       ChampionshipPreset @relation(fields: [presetId], references: [id])

  @@id([presetId, layoutId])
}

model ChampionshipPresetCategories {
  presetId  Int
  categoryId Int
  
  categories       Category @relation(fields: [categoryId], references: [id])
  preset       ChampionshipPreset @relation(fields: [presetId], references: [id])

  @@id([presetId, categoryId])
}

/// Sistemas de puntuación ///

// Definición de cuanto puntua cada posición, vuelta rapida o pole, distinguidos por un nombre.
model ScoreSystem {
  id            Int                   @id @default(autoincrement())

  positionScore ScoreSystemPosition[]
  extraScore    ScoreSystemExtra[]

  WorkshopPresets ChampionshipPresetScores[]
}

// Valores de puntuación de cada posición dentro de un sistema de puntuación.
model ScoreSystemPosition {
  id       Int         @id @default(autoincrement())
  parent   ScoreSystem @relation(fields: [parentId], references: [id])
  
  score    Int   
  parentId Int
}

// Definición de las opciones extra dentro de los sistemas de puntuación (pole, vuelta rapida...).
model ExtraScore {
  id               Int                @id @default(autoincrement())
  name             String
  scoreSystemExtra ScoreSystemExtra[]
}

// Valores de puntuación de pole, vuelta rapida y otras opciones extra dentro de un sistema de puntuación.
model ScoreSystemExtra {
  id       Int         @id @default(autoincrement())
  extraId  Int
  score    String      @db.VarChar(255)
  parentId Int
  parent   ScoreSystem @relation(fields: [parentId], references: [id])
  extra    ExtraScore  @relation(fields: [extraId], references: [id])
}

/// Circuitos ///

model Track {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  description String        @db.VarChar(255)
  country     String        @db.VarChar(3)
  location    String        @db.VarChar(255)
  layouts     TrackLayout[]
  session     Session[]
}

model TrackLayout {
  id          Int    @id @default(autoincrement())
  name        String @db.VarChar(255)
  description String @db.VarChar(255)
  parent      Track  @relation(fields: [parentId], references: [id])
  parentId    Int

  WorkshopPresetLayouts ChampionshipPresetLayouts[]
}

// Simuladores

model SimulatorGame {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  description String        @db.VarChar(255)
  picUrl     String?         @db.VarChar(255)
  releaseYear     Int       @db.Year

  userFavourites FavouriteSimulator[]
  championships LeagueChampionship[]
}

/// Posts de ligas ///

model LeaguePost {
  id            Int            @id @default(autoincrement())
  title         String         @db.VarChar(255)
  description   String         @db.VarChar(255)
  content       String         @db.LongText
  authorId      Int
  leagueId      Int
  createdAt     DateTime       @default(now()) @db.DateTime(6)
  updatedAt     DateTime
  private       Boolean        @default(false)

  author      User  @relation(fields: [authorId], references: [id])
  league      League  @relation(fields: [leagueId], references: [id])

  postComment PostComment[]
  files LeaguePostFile[]
}

model PostComment {
  id            Int            @id @default(autoincrement())
  content       String         @db.LongText
  authorId      Int
  postId        Int
  createdAt     DateTime       @default(now()) @db.DateTime(6)
  updatedAt     DateTime

  author      User  @relation(fields: [authorId], references: [id])
  post        LeaguePost  @relation(fields: [postId], references: [id])

  files CommentPostFile[]
}

model LeaguePostFile {
  id            Int           @id @default(autoincrement())
  fileUrl       String        @db.VarChar(255)
  postId          Int

  post      LeaguePost  @relation(fields: [postId], references: [id])
}

model CommentPostFile {
  id            Int           @id @default(autoincrement())
  fileUrl       String        @db.VarChar(255)
  commentId          Int

  comment      PostComment  @relation(fields: [commentId], references: [id])
}

/// Registros de auditoria ///

model LeagueAuditAction {
  id            Int           @id @default(autoincrement())
  name       String        @db.VarChar(255)
  description       String        @db.VarChar(255)

  usages      LeagueAuditLog[]
}


model LeagueAuditLog {
  id            Int           @id @default(autoincrement())
  actionId      Int
  target        Int // Puede ser cualquier cosa, un rol, un campeonato, un usuario... Si miras la base de datos es lioso, 
  //  pero es la unica forma que veo sin meter una tabla por cada acción (lo cual seria peor)

  authorId Int
  date          DateTime       @default(now()) @db.DateTime(6)

  action      LeagueAuditAction  @relation(fields: [actionId], references: [id])
  user      User  @relation(fields: [authorId], references: [id])
}